package com.dhr.web.servlet;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.ResourceBundle;

import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.dhr.constant.Constant;
import com.dhr.service.OrderService;
import com.dhr.service.impl.OrderServiceImpl;
import com.dhr.util.BeanFactory;
import com.dhr.util.PaymentUtil;
import com.dhr.util.UUIDUtils;
import com.dhr.web.domain.Cart;
import com.dhr.web.domain.CartItem;
import com.dhr.web.domain.Order;
import com.dhr.web.domain.OrderItem;
import com.dhr.web.domain.PageBean;
import com.dhr.web.domain.Product;
import com.dhr.web.domain.User;
import com.dhr.web.servlet.baseservlet.BaseServlet;
/**
 * 订单处理器
 * @author Mr DU
 *
 */
@WebServlet("/order")
public class OrderServlet extends BaseServlet{
	private static final long serialVersionUID = 1L;
	/**
	 * 保存订单
	 * @param req
	 * @param res
	 * @return
	 * 	private String oid;//订单编号
		private Date ordertime;//订单时间
		private double total;//订单总金额
		private Integer state;//订单状态
		private User user;//订单:用户  n:1 在n的一方放一个1的一方对象
		private List<OrderItem> items = new ArrayList<>();//订单:订单项  1:n  在1的一方有需要可以放一个n的一方的集合
	 * @throws Exception 
	 */
	public String saveOrder(HttpServletRequest req,HttpServletResponse res) throws Exception {
		HttpSession session = req.getSession();
		//0.获取相关session对象
		Cart cart = (Cart) session.getAttribute("cart");
		User user = (User) session.getAttribute("user");
		try {
			//1.需要什么就封装什么数据
			Order order = new Order();
			order.setOid(UUIDUtils.getId());
			order.setOrdertime(new Date());
			order.setTotal(cart.getTotal());
			order.setState(Constant.ORDER_NO);
			order.setUser(user);
			//遍历这个订单有哪些订单项
			for(CartItem ci : cart.getCartItems()) {
				OrderItem orderItem = new OrderItem();
				orderItem.setItemid(UUIDUtils.getId());
				orderItem.setCount(ci.getCount());
				orderItem.setSubtotal(ci.getSubtotal());
				orderItem.setProduct(ci.getProduct());
				orderItem.setOrder(order);
				//把订单项的数据加入到订单中
				order.getItems().add(orderItem);
			}
			//2.调用service处理业务
			OrderService os = (OrderService) BeanFactory.getBean("OrderService");
			os.saveOrder(order);
			//3.把order保存到会话中,重定向
			session.setAttribute("order", order);
		} catch (Exception e) {
			e.printStackTrace();
			req.setAttribute("msg", "会话已过期,添加订单失败,请重新登录");
			return "/jsp/msg.jsp";
		}
		res.sendRedirect(req.getContextPath()+"/jsp/order_info.jsp");
		//添加完成后清除购物车数据
		cart.clearCart();
		return null;
	}
	/**
	 * 取消订单
	 * @param req
	 * @param res
	 * @return
	 */
	public String deleteOrder(HttpServletRequest req,HttpServletResponse res) {
		try {
			//1.获取订单号
			String oid = req.getParameter("oid");
			//2.调用service方法
			OrderService os = (OrderService) BeanFactory.getBean("OrderService");
			os.deleteOrder(oid);
			req.setAttribute("msg", "订单编号"+oid+"取消成功!");
		} catch (Exception e) {
			req.setAttribute("msg", "订单取消失败!");
			e.printStackTrace();
		}
		//3.返回转发
		return "/jsp/msg.jsp";
	}
	/**
	 * 查询我的所有订单
	 * @param req
	 * @param res
	 * @return
	 * @throws Exception
	 */
	public String findOrderByPage(HttpServletRequest req,HttpServletResponse res) throws Exception{
		try {
			//1.获取pageNumber,设置pagesize,获取当前用户id
			int pageNumber=1;
			int pageSize = 3;
			pageNumber = Integer.parseInt(req.getParameter("pageNumber"));
			String userid = (String)req.getSession().getAttribute("userid");
			//2.创建pageBean
			PageBean<Order> pageBean = null;
			//3.调用service方法,返回beanpage
			OrderService os = (OrderService) BeanFactory.getBean("OrderService");
			pageBean = os.findOrderByPage(pageNumber,pageSize,userid);
			//4.放入域中请求转发
			req.setAttribute("pageBean", pageBean);
		} catch (Exception e) {
			e.printStackTrace();
			req.setAttribute("msg", "获取订单失败");
			return "/jsp/msg.jsp";
		}
		return "/jsp/order_list.jsp";
	}
	/**
	 * 查看详情购物
	 * 查询某个订单
	 * @param req
	 * @param res
	 * @return
	 * @throws IOException
	 */
	public String gotoOrder(HttpServletRequest req,HttpServletResponse res) throws IOException {
		try {
			//1.获取订单ID
			String oid = req.getParameter("oid");
			//2.根据订单ID查询订单项和商品信息
			OrderService os = (OrderService) BeanFactory.getBean("OrderService");
			Order order = os.getById(oid);
			//3.把查出来的order放入域中
			req.getSession().setAttribute("order", order);
		} catch (Exception e) {
			req.setAttribute("msg", "下单失败!重新登录试试看");
			e.printStackTrace();
		}
		res.sendRedirect(req.getContextPath()+"/jsp/order_info.jsp");
		return null;
	}
	/**
	 * 确认收货
	 * @param req
	 * @param res
	 * @return
	 */
	public String sureOrder(HttpServletRequest req,HttpServletResponse res) {
		try {
			String oid = req.getParameter("oid");
			OrderService os = new OrderServiceImpl();
			Order order = new Order();
			order.setOid(oid);
			order.setState(3);
			os.updateOrder(order);
			req.setAttribute("msg", "收货成功,快去评价吧!");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "/jsp/msg.jsp";
	}
	
	
	
	
	
	
	
	
	
	
	
	/**
	 * 支付功能
	 * @param req
	 * @param res
	 * @return
	 */
	public String pay(HttpServletRequest request,HttpServletResponse respone) throws Exception{
		//接受参数
		String address=request.getParameter("address");
		String name=request.getParameter("name");
		String telephone=request.getParameter("telephone");
		String oid=request.getParameter("oid");
		//通过id获取order订单
		OrderService os = (OrderService) BeanFactory.getBean("OrderService");
		Order order = os.getById(oid);
		//把页面传来的参数封装到order
		order.setAddress(address);
		order.setName(name);
		order.setTelephone(telephone);
		//更新order订单
		os.updateOrder(order);
		
		// 组织发送支付公司需要哪些数据
		String pd_FrpId = request.getParameter("pd_FrpId");
		String p0_Cmd = "Buy";
		String p1_MerId = ResourceBundle.getBundle("merchantInfo").getString("p1_MerId");
		String p2_Order = oid;
		String p3_Amt = "0.01";
		String p4_Cur = "CNY";
		String p5_Pid = "";
		String p6_Pcat = "";
		String p7_Pdesc = "";
		// 支付成功回调地址 ---- 第三方支付公司会访问、用户访问
		// 第三方支付可以访问网址
		String p8_Url = ResourceBundle.getBundle("merchantInfo").getString("responseURL");
		String p9_SAF = "";
		String pa_MP = "";
		String pr_NeedResponse = "1";
		// 加密hmac 需要密钥
		String keyValue = ResourceBundle.getBundle("merchantInfo").getString("keyValue");
		String hmac = PaymentUtil.buildHmac(p0_Cmd, p1_MerId, p2_Order, p3_Amt,
				p4_Cur, p5_Pid, p6_Pcat, p7_Pdesc, p8_Url, p9_SAF, pa_MP,
				pd_FrpId, pr_NeedResponse, keyValue);
	
		//发送给第三方
		StringBuffer sb = new StringBuffer("https://www.yeepay.com/app-merchant-proxy/node?");
		sb.append("p0_Cmd=").append(p0_Cmd).append("&");
		sb.append("p1_MerId=").append(p1_MerId).append("&");
		sb.append("p2_Order=").append(p2_Order).append("&");
		sb.append("p3_Amt=").append(p3_Amt).append("&");
		sb.append("p4_Cur=").append(p4_Cur).append("&");
		sb.append("p5_Pid=").append(p5_Pid).append("&");
		sb.append("p6_Pcat=").append(p6_Pcat).append("&");
		sb.append("p7_Pdesc=").append(p7_Pdesc).append("&");
		sb.append("p8_Url=").append(p8_Url).append("&");
		sb.append("p9_SAF=").append(p9_SAF).append("&");
		sb.append("pa_MP=").append(pa_MP).append("&");
		sb.append("pd_FrpId=").append(pd_FrpId).append("&");
		sb.append("pr_NeedResponse=").append(pr_NeedResponse).append("&");
		sb.append("hmac=").append(hmac);
		
		respone.sendRedirect(sb.toString());
		
		return null;
	}
	/**
	 * 回调信息
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public String callback(HttpServletRequest request,HttpServletResponse response) throws Exception{
		String p1_MerId = request.getParameter("p1_MerId");
		String r0_Cmd = request.getParameter("r0_Cmd");
		String r1_Code = request.getParameter("r1_Code");
		String r2_TrxId = request.getParameter("r2_TrxId");
		String r3_Amt = request.getParameter("r3_Amt");
		String r4_Cur = request.getParameter("r4_Cur");
		String r5_Pid = request.getParameter("r5_Pid");
		String r6_Order = request.getParameter("r6_Order");
		String r7_Uid = request.getParameter("r7_Uid");
		String r8_MP = request.getParameter("r8_MP");
		String r9_BType = request.getParameter("r9_BType");
		String rb_BankId = request.getParameter("rb_BankId");
		String ro_BankOrderId = request.getParameter("ro_BankOrderId");
		String rp_PayDate = request.getParameter("rp_PayDate");
		String rq_CardNo = request.getParameter("rq_CardNo");
		String ru_Trxtime = request.getParameter("ru_Trxtime");
		// 身份校验 --- 判断是不是支付公司通知你
		String hmac = request.getParameter("hmac");
		String keyValue = ResourceBundle.getBundle("merchantInfo").getString(
				"keyValue");

		// 自己对上面数据进行加密 --- 比较支付公司发过来hamc
		boolean isValid = PaymentUtil.verifyCallback(hmac, p1_MerId, r0_Cmd,
				r1_Code, r2_TrxId, r3_Amt, r4_Cur, r5_Pid, r6_Order, r7_Uid,
				r8_MP, r9_BType, keyValue);
		if (isValid) {
			// 响应数据有效
			if (r9_BType.equals("1")) {
				// 浏览器重定向
				request.setAttribute("msg", "您的订单号为:"+r6_Order+",金额为:"+r3_Amt+"已经支付成功,等待发货~~");
				
			} else if (r9_BType.equals("2")) {
				// 服务器点对点 --- 支付公司通知你
				System.out.println("付款成功！222");
				// 修改订单状态 为已付款
				// 回复支付公司
				response.getWriter().print("success");
			}
			
			//修改订单状态
			OrderService os= (OrderService) BeanFactory.getBean("OrderService");
			Order order = os.getById(r6_Order);
			order.setState(1);
			os.updateOrder(order);
		} else {
			// 数据无效
			System.out.println("数据被篡改！");
		}
		return "/jsp/msg.jsp";
		
	}
}
